// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jossemargt.cmsgalatea.repository;

import com.jossemargt.cmsgalatea.model.QStatement;
import com.jossemargt.cmsgalatea.model.Statement;
import com.jossemargt.cmsgalatea.model.Task;
import com.jossemargt.cmsgalatea.repository.StatementRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect StatementRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: StatementRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StatementRepositoryImpl.LANGUAGE = "language";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StatementRepositoryImpl.CONTENT = "content";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StatementRepositoryImpl.TASK = "task";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param task
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Statement> StatementRepositoryImpl.findByTask(Task task, GlobalSearch globalSearch, Pageable pageable) {
        
        QStatement statement = QStatement.statement;
        
        JPQLQuery<Statement> query = from(statement);
        
        Assert.notNull(task, "task is required");
        
        query.where(statement.task.eq(task));
        Path<?>[] paths = new Path<?>[] {statement.language,statement.content,statement.task};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(LANGUAGE, statement.language)
			.map(CONTENT, statement.content)
			.map(TASK, statement.task);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, statement);
    }
    
}
