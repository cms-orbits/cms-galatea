// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.jossemargt.cmsgalatea.repository;

import com.jossemargt.cmsgalatea.model.Contest;
import com.jossemargt.cmsgalatea.model.ContestByName;
import com.jossemargt.cmsgalatea.model.ContestInfo;
import com.jossemargt.cmsgalatea.model.QContest;
import com.jossemargt.cmsgalatea.repository.ContestRepositoryImpl;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Path;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ContestRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ContestRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.DESCRIPTION = "description";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.ALLOWED_LOCALIZATIONS = "allowedLocalizations";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.LANGUAGES = "languages";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.SUBMISSIONS_DOWNLOAD_ALLOWED = "submissionsDownloadAllowed";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.ALLOW_QUESTIONS = "allowQuestions";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.ALLOW_USER_TESTS = "allowUserTests";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.BLOCK_HIDDEN_PARTICIPATIONS = "blockHiddenParticipations";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.ALLOW_PASSWORD_AUTHENTICATION = "allowPasswordAuthentication";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.IP_RESTRICTION = "ipRestriction";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.IP_AUTOLOGIN = "ipAutologin";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.TOKEN_MODE = "tokenMode";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.TOKEN_MAX_NUMBER = "tokenMaxNumber";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.TOKEN_MIN_INTERVAL = "tokenMinInterval";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.TOKEN_GEN_INITIAL = "tokenGenInitial";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.TOKEN_GEN_NUMBER = "tokenGenNumber";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.TOKEN_GEN_MAX = "tokenGenMax";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.TOKEN_GEN_INTERVAL = "tokenGenInterval";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.START_TIME = "startTime";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.STOP_TIME = "stopTime";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.ANALYSIS_ENABLED = "analysisEnabled";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.ANALYSIS_START = "analysisStart";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.ANALYSIS_STOP = "analysisStop";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.MAX_SUBMISSION_NUMBER = "maxSubmissionNumber";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.MAX_USER_TEST_NUMBER = "maxUserTestNumber";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.MIN_SUBMISSION_INTERVAL = "minSubmissionInterval";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.MIN_USER_TEST_INTERVAL = "minUserTestInterval";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.SCORE_PRECISION = "scorePrecision";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContestRepositoryImpl.ID = "id";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ContestInfo> ContestRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QContest contest = QContest.contest;
        
        JPQLQuery<Contest> query = from(contest);
        
        Path<?>[] paths = new Path<?>[] {contest.id,contest.name,contest.description,contest.languages,contest.startTime,contest.stopTime};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ID, contest.id)
			.map(NAME, contest.name)
			.map(DESCRIPTION, contest.description)
			.map(LANGUAGES, contest.languages)
			.map(START_TIME, contest.startTime)
			.map(STOP_TIME, contest.stopTime);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, Projections.constructor(ContestInfo.class, contest.id, contest.name, contest.description, contest.languages, contest.startTime, contest.stopTime ));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ContestInfo> ContestRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QContest contest = QContest.contest;
        
        JPQLQuery<Contest> query = from(contest);
        
        Path<?>[] paths = new Path<?>[] {contest.id,contest.name,contest.description,contest.languages,contest.startTime,contest.stopTime};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(contest.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ID, contest.id)
			.map(NAME, contest.name)
			.map(DESCRIPTION, contest.description)
			.map(LANGUAGES, contest.languages)
			.map(START_TIME, contest.startTime)
			.map(STOP_TIME, contest.stopTime);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, Projections.constructor(ContestInfo.class, contest.id, contest.name, contest.description, contest.languages, contest.startTime, contest.stopTime ));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ContestInfo> ContestRepositoryImpl.findByName(ContestByName formBean, GlobalSearch globalSearch, Pageable pageable) {
        
        QContest contest = QContest.contest;
        
        JPQLQuery<Contest> query = from(contest);
        
        if (formBean != null) {
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getName() != null) {
                        searchCondition.and(contest.name.eq(formBean.getName()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        }
        
        Path<?>[] paths = new Path<?>[] {contest.id,contest.name,contest.description,contest.languages,contest.startTime,contest.stopTime};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ID, contest.id)
			.map(NAME, contest.name)
			.map(DESCRIPTION, contest.description)
			.map(LANGUAGES, contest.languages)
			.map(START_TIME, contest.startTime)
			.map(STOP_TIME, contest.stopTime);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, Projections.constructor(ContestInfo.class, contest.id, contest.name, contest.description, contest.languages, contest.startTime, contest.stopTime ));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @return Long
     */
    public long ContestRepositoryImpl.countByName(ContestByName formBean) {
        
        QContest contest = QContest.contest;
        
        JPQLQuery<Contest> query = from(contest);
        
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getName() != null) {
                        searchCondition.and(contest.name.eq(formBean.getName()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        return query.fetchCount();
    }
    
}
